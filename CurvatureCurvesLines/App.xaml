<Application x:Class="CurvatureCurvesLines.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:CurvatureCurvesLines"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />
        <GradientStopCollection x:Key="MyGlassGradientStopsResource">
            <GradientStop Color="LightBlue"  Offset="0.2" />
            <GradientStop Color="Transparent" Offset="0.4" />
            <GradientStop Color="LightBlue" Offset="0.5" />
            <GradientStop Color="Transparent" Offset="0.75" />
            <GradientStop Color="LightBlue"  Offset="0.9" />
            <GradientStop Color="Transparent" Offset="1" />
        </GradientStopCollection>
        <LinearGradientBrush x:Key="MyGlassBrushResource" 
    			StartPoint="0,0" EndPoint="1,1" Opacity="0.75" 
    			GradientStops="{StaticResource MyGlassGradientStopsResource}" />

        <RadialGradientBrush x:Key="LabelForeColor" RadiusX="0.667" RadiusY="0.573" GradientOrigin="1.01,1.035">
            <GradientStop Color="#FF06183C" Offset="0.81"/>
            <GradientStop Color="#FF0D60A3"/>
        </RadialGradientBrush>
        <LinearGradientBrush x:Key="GrayBlueGradientBrush" 
    			StartPoint="0,0" EndPoint="1,1">
            <GradientStop Color="LightBlue" Offset="0" />
            <GradientStop Color="#CCCCFF" Offset="0.25" />
            <GradientStop Color="LightBlue" Offset="0.5" />
            <GradientStop Color="#CCCCFF" Offset="0.75" />
            <GradientStop Color="LightBlue" Offset="1" />
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="GrayBlueGradientBrush_Enabled" 
    			StartPoint="0,0" EndPoint="1,1">
            <GradientStop Color="DarkOliveGreen"   Offset="0" />
            <GradientStop Color="Bisque" Offset="0.5" />
            <GradientStop Color="DarkOliveGreen" Offset="1" />
        </LinearGradientBrush>
        <RadialGradientBrush x:Key="borderstyle"  RadiusY="0.573" RadiusX="0.667" GradientOrigin="1.01,1.035">
            <GradientStop Color="#FF06183C" Offset="0.81"/>
            <GradientStop Color="#FF0D60A3"/>
        </RadialGradientBrush>

        <RadialGradientBrush x:Key="EnabledButtonBackground" RadiusY="0.573" RadiusX="0.667" GradientOrigin="1.01,1.035">
            <GradientStop Color="LightBlue" Offset="0" />
            <GradientStop Color="#CCCCFF" Offset="0.5" />
            <GradientStop Color="LightBlue" Offset="1" />
        </RadialGradientBrush>
        <Style TargetType="{x:Type TextBlock}">
            <Setter Property="HorizontalAlignment" Value="Center" />
            <Setter Property="FontFamily" Value="Comic Sans MS"/>
            <Setter Property="FontSize" Value="14"/>
        </Style>

        <Style BasedOn="{StaticResource {x:Type TextBlock}}"
    			TargetType="{x:Type TextBlock}"
    			x:Key="TitleText">
            <Setter Property="FontSize" Value="26"/>
            <Setter Property="Foreground" Value="{StaticResource GrayBlueGradientBrush_Enabled}"/>
        </Style>
        <Style TargetType="{x:Type Button}">

            <Setter Property="Background" 
    				Value="{StaticResource GrayBlueGradientBrush}" />
            <!--<Setter Property="Width" Value="auto" />
            <Setter Property="Height" Value=" auto"/>
            <Setter Property="Margin" Value="auto" />-->

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid Width="{TemplateBinding Width}" 
    							Height="{TemplateBinding Height}" ClipToBounds="True">

                            <!-- Outer Rectangle with rounded corners. -->
                            <Rectangle x:Name="outerRectangle" 
    								HorizontalAlignment="Stretch" 
    								VerticalAlignment="Stretch" 
    								Stroke="{TemplateBinding Background}" 
    								RadiusX="20" RadiusY="20" StrokeThickness="5" 
    								Fill="Transparent" />

                            <!-- Inner Rectangle with rounded corners. -->
                            <Rectangle x:Name="innerRectangle" 
    								HorizontalAlignment="Stretch" 
    								VerticalAlignment="Stretch" Stroke="Transparent" 
    								StrokeThickness="20" 
    								Fill="{TemplateBinding Background}" 
    								RadiusX="20" RadiusY="20"  />
                            <!-- Glass Rectangle -->
                            <Rectangle x:Name="glassCube" HorizontalAlignment="Stretch"
    								VerticalAlignment="Stretch"
    								StrokeThickness="2" RadiusX="10" RadiusY="10" Opacity="0"
    								Fill="{StaticResource MyGlassBrushResource}"
    								RenderTransformOrigin="0.5,0.5">
                                <Rectangle.Stroke>
                                    <LinearGradientBrush StartPoint="0.5,0" EndPoint="0.5,1">
                                        <GradientStop Offset="0.0" Color="LightBlue" />
                                        <GradientStop Offset="1.0" Color="Gray" />
                                    </LinearGradientBrush>
                                </Rectangle.Stroke>
                                <!-- These transforms have no effect as they are declared here. 
           The reason the transforms are included is to be targets 
           for animation (see later). -->
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform />
                                        <RotateTransform />
                                    </TransformGroup>
                                </Rectangle.RenderTransform>

                                <!-- A BevelBitmapEffect is applied to give the button a 
           "Beveled" look. -->
                                <Rectangle.BitmapEffect>
                                    <BevelBitmapEffect />
                                </Rectangle.BitmapEffect>
                            </Rectangle>
                            <!-- Present Content (text) of the button. -->
                            <!-- Present Text of the button. -->
                            <DockPanel x:Name="myContentPresenterDockPanel">
                                <ContentPresenter x:Name="myContentPresenter" Margin="20" 
    									Content="{TemplateBinding Content}" TextBlock.Foreground="Black" />
                            </DockPanel>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="true">
                                <Setter Property="Fill" TargetName="outerRectangle" Value="{StaticResource GrayBlueGradientBrush_Enabled}" />


                                <!-- Change the color of the outer rectangle when user          mouses over it. -->


                            </Trigger>
                            <!-- Set properties when mouse pointer is over the button. -->
                            <Trigger Property="IsMouseOver" Value="True">


                                <!-- Below are three property settings that occur when the 
         condition is met (user mouses over button).  -->
                                <!-- Change the color of the outer rectangle when user          mouses over it. -->
                                <Setter Property ="Stroke" TargetName="outerRectangle"
    									Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />

                                <!-- Sets the glass opacity to 1, therefore, the          glass "appears" when user mouses over it. -->
                                <Setter Property="Opacity" Value="1"       TargetName="glassCube" />

                                <!-- Makes the text slightly blurry as though you were          looking at it through blurry glass. -->
                                <Setter Property="BitmapEffect"       TargetName="myContentPresenter">
                                    <Setter.Value>
                                        <BlurBitmapEffect Radius="1" />
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <!-- Set properties when button has focus. -->
                            <Trigger Property="IsFocused" Value="true">
                                <Setter Property="Opacity" Value="1"  TargetName="glassCube" />
                                <Setter Property="Stroke" TargetName="outerRectangle"
    									Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                                <Setter Property="Opacity" Value="3" TargetName="glassCube" />
                            </Trigger>

                            <!-- Animations that start when mouse enters and leaves button. -->
                            <EventTrigger RoutedEvent="Mouse.MouseEnter">
                                <BeginStoryboard x:Name="mouseEnterBeginStoryboard">
                                    <Storyboard>

                                        <!-- This animation makes the glass rectangle shrink in the X direction. -->
                                        <DoubleAnimation Storyboard.TargetName="glassCube" 
    											Storyboard.TargetProperty=
          "(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)"
    											By="-0.1" Duration="0:0:0.5" />

                                        <!-- This animation makes the glass rectangle shrink in the Y direction. -->
                                        <DoubleAnimation
    											Storyboard.TargetName="glassCube" 
    											Storyboard.TargetProperty=
          "(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)" 
    											By="-0.1" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                            <EventTrigger RoutedEvent="Mouse.MouseLeave">

                                <!-- Stopping the storyboard sets all animated properties back to default. -->
                                <StopStoryboard BeginStoryboardName="mouseEnterBeginStoryboard" />
                            </EventTrigger>
                            <!-- Animation fires when button is clicked, causing glass to spin.  -->
                            <EventTrigger RoutedEvent="ButtonBase.Click">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="glassCube" 
    											Storyboard.TargetProperty=
          "(UIElement.RenderTransform).(TransformGroup.Children)[1].(RotateTransform.Angle)" 
    											By="360" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>

                </Setter.Value>
            </Setter>
        </Style>
    </Application.Resources>
</Application>
